{"version":3,"file":"static/js/554.9188cc34.chunk.js","mappings":"qLASMA,EAAgB,CAClB,CACIC,IAAK,EACLC,MAAO,gBACPC,SAAU,aAILC,EAAW,CACpBC,EAAAA,KAAAA,KAAU,UAAU,SAACC,EAAKC,EAAKC,GAC3B,MAAgCF,EAAIG,KAA7BP,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAGd,OADmBH,EAAMU,QAAO,SAACC,GAAD,OAAOA,EAAET,QAAUA,CAAnB,IAChBU,OAEMZ,EAAMU,QAAO,SAACC,GAAD,OAAOA,EAAER,WAAaA,CAAtB,IAChBS,OAGZL,EAAIC,EAAIK,OAAO,KAAML,EAAIM,KAAK,CAACZ,MAAOA,KAFlCK,EAAIC,EAAIK,OAAO,KAAML,EAAIM,KAAK,aAJVP,EAAIC,EAAIK,OAAO,KAAML,EAAIM,KAAK,SAOhE,IAEDT,EAAAA,KAAAA,KAAU,aAAa,SAACC,EAAKC,EAAKC,GAC9B,MAAgCF,EAAIG,KAA7BP,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAEd,GADmBH,EAAMU,QAAO,SAACC,GAAD,OAAOA,EAAET,QAAUA,CAAnB,IAChBU,OAAQ,OAAOL,EAAIC,EAAIK,OAAO,KAAML,EAAIM,KAAK,4FAE7D,IAAMC,EAASf,EAAMA,EAAMY,OAAQ,GAAGX,IAOtC,OANAD,EAAMgB,KAAK,CACPf,IAAKc,EACLb,MAAOA,EACPC,SAAUA,IAGPI,EAAIC,EAAIK,OAAO,KAAML,EAAIM,KAAK,CAACZ,MAAOA,IAChD,IAGDG,EAAAA,KAAAA,IAAS,SAAS,SAACC,EAAIC,EAAIC,GACvB,OAAOD,EAAIC,EAAIK,OAAO,KAAML,EAAIM,KAAKd,GACxC,KC9CQiB,EAAyBC,EAAAA,YAAAA,WAAA,UAAed,G","sources":["mock/handler.ts","mock/worker.ts"],"sourcesContent":["import {rest} from \"msw\";\n\n\ninterface User {\n    key: number;\n    email: string;\n    password: string;\n}\n\nconst users = <User[]>[\n    {\n        key: 0,\n        email: \"test@test.com\",\n        password: \"qwer1234\",\n    },\n];\n\nexport const handlers = [\n    rest.post(\"/login\", (req, res, ctx) => {\n        const {email, password} = <User>req.body;\n\n        const checkEmail = users.filter((v) => v.email === email);\n        if (!checkEmail.length) return res(ctx.status(201), ctx.json(\"email\"));\n\n        const checkPassword = users.filter((v) => v.password === password);\n        if (!checkPassword.length)\n            return res(ctx.status(201), ctx.json(\"password\"));\n\n        return res(ctx.status(200), ctx.json({email: email}));\n    }),\n\n    rest.post('/register', (req, res, ctx) => {\n        const {email, password} = <User>req.body;\n        const checkEmail = users.filter((v) => v.email !== email);\n        if(!!checkEmail.length) return res(ctx.status(201), ctx.json(\"이미 사용하고있는 이메일입니다.\"));\n\n        const newKey = users[users.length -1].key;\n        users.push({\n            key: newKey,\n            email: email,\n            password: password\n        })\n\n        return res(ctx.status(200), ctx.json({email: email}));\n    }),\n\n\n    rest.get(\"/test\", (req,res,ctx) => {\n        return res(ctx.status(200), ctx.json(users))\n    })\n\n];\n","import { setupWorker, SetupWorkerApi } from 'msw';\nimport { handlers } from \"@/mock/handler\";\n\nexport const worker: SetupWorkerApi = setupWorker(...handlers);"],"names":["users","key","email","password","handlers","rest","req","res","ctx","body","filter","v","length","status","json","newKey","push","worker","setupWorker"],"sourceRoot":""}